using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Text;
using System.Threading.Tasks;
using Windows.Devices.Bluetooth;
using Windows.Devices.Bluetooth.GenericAttributeProfile;
using Windows.Devices.Enumeration;
using Windows.Storage.Streams;

namespace UwpBluetooth
{
  public class GattExample
  {
    public delegate Task ServiceReceivedDelegate();

    public ServiceReceivedDelegate ServiceReceived;
    private DeviceWatcher DeviceWatcher { get; set; }

    public ulong SensorBugBluetoothAddress { get; } = 0xEC_FE_7E_10_9D_7E;
    public String LuminosityGattServiceUuuid { get; } = "9dc84838-7619-4f09-a1ce-ddcf63225b20";
    public String LuminosityGattServiceConfigCharateristicUuuid { get; } = "9dc84838-7619-4f09-a1ce-ddcf63225b21";
    public String LuminosityGattServiceDataCharateristicUuuid { get; } = "9dc84838-7619-4f09-a1ce-ddcf63225b22";
    public GattDeviceService GattDeviceServiceLuminosity { get; set; }

    public String BatteryGattServiceUuuid { get; } = "0000180F-0000-1000-8000-00805F9B34FB";
    public String BatteryGattServiceDataCharateristicUuuid { get; } = "00002A19-0000-1000-8000-00805F9B34FB";
    public GattDeviceService GattDeviceServiceBattery { get; set; }

    public GattExample()
    {
    }

    public void Start()
    {
      // Only paired devices
      string[] requestedProperties = {"System.Devices.Aep.IsPaired"};

      //Protocoll ID for bluetooth LE devices
      string aqsFilter = "System.Devices.Aep.ProtocolId:=\"{bb7bb05e-5972-42b5-94fc-76eaa7084d49}\"";

      // Create device watchaer
      DeviceWatcher = DeviceInformation.CreateWatcher(
        aqsFilter,
        requestedProperties,
        DeviceInformationKind.AssociationEndpoint
      );

      // Set event handler for receiving device informations
      DeviceWatcher.Added += DeviceWatcher_Added;
      DeviceWatcher.Start();

    }

    private async void DeviceWatcher_Added(DeviceWatcher sender, DeviceInformation args)
    {
      // device information received
      await TryLocateServices(args).ConfigureAwait(false);
    }

    public async Task<Boolean> TryLocateServices(DeviceInformation deviceInformation)
    {
      // Get reference on BluetoothLEDevice by Id from deviceInformation
      BluetoothLEDevice bluetoothLEDevice = await BluetoothLEDevice.FromIdAsync(deviceInformation.Id);

      if (bluetoothLEDevice == null)
      {
        return false;
      }

      // Check if this ist the device we want => SensorBug109D7
      if (bluetoothLEDevice.BluetoothAddress != SensorBugBluetoothAddress)
      {
        return false;
      }

      // Try get access to device
      Windows.Devices.Enumeration.DeviceAccessStatus result;
      try
      {
        result = await bluetoothLEDevice.RequestAccessAsync();
      }
      catch (Exception)
      {
        result = Windows.Devices.Enumeration.DeviceAccessStatus.DeniedBySystem;
      }

      // Access denied
      if (result != DeviceAccessStatus.Allowed)
      {
        return false;
      }

      // Get services of device in loop with timeout of 100 ms 
      GattDeviceServicesResult gattDeviceServicesResult = null;
      for (int i = 0; i < 5; i++)
      {
        // Try get list of services
        gattDeviceServicesResult = await bluetoothLEDevice.GetGattServicesAsync(BluetoothCacheMode.Uncached);

        // Any services in list
        if (gattDeviceServicesResult?.Services.Count > 0)
        {
          break;
        }

        // Wait 100 ms
        await Task.Delay(100).ConfigureAwait(false);
      }

      // No services available
      if (gattDeviceServicesResult == null || gattDeviceServicesResult?.Services.Count == 0)
      {
        return false;
      }

      // Iterate services 
      foreach (var service in gattDeviceServicesResult.Services)
      {
        // 9dc84838-7619-4f09-a1ce-ddcf63225b20 is the luminosity service
        if (String.Compare(LuminosityGattServiceUuuid, service.Uuid.ToString(),
              StringComparison.OrdinalIgnoreCase) == 0)
        {
          GattDeviceServiceLuminosity = service;
        }

        if (String.Compare(BatteryGattServiceUuuid, service.Uuid.ToString(),
              StringComparison.OrdinalIgnoreCase) == 0)
        {
          GattDeviceServiceBattery = service;
        }

      }

      ServiceReceived?.Invoke();
      return true;
    }

    public async Task<double> ReadLuminosityValue()
    {
      if (GattDeviceServiceLuminosity == null)
      {
        return double.MinValue;
      }
      return await ReadLuminosityValue(GattDeviceServiceLuminosity).ConfigureAwait(false);
    }

    public async Task<double> ReadBatteryValue()
    {
      if (GattDeviceServiceBattery == null)
      {
        return double.MinValue;
      }
      return await ReadBatteryValue(GattDeviceServiceBattery).ConfigureAwait(false);
    }

    protected async Task<double> ReadLuminosityValue(GattDeviceService deviceService)
    {
      try
      {
        double luminosity = double.MinValue;

        // Get characteristic for config of luminosity sensor
        GattCharacteristic configCharacteristic = (await deviceService.GetCharacteristicsForUuidAsync(
          new Guid(LuminosityGattServiceConfigCharateristicUuuid))).Characteristics[0];


        // Enable luminosity sensor
        byte[] enable = {1};
        await configCharacteristic.WriteValueAsync(enable.AsBuffer());

        // Get characteristic for reading of luminosity sensor
        GattCharacteristic dataCharacteristic = (await deviceService.GetCharacteristicsForUuidAsync(
          new Guid(LuminosityGattServiceDataCharateristicUuuid))).Characteristics[0];

        // try read in loop
        for (int i = 0; i < 5; i++)
        {
          // Read value from data characteristic
          GattReadResult readResult = await dataCharacteristic.ReadValueAsync(BluetoothCacheMode.Uncached);

          // Valid data ?
          if (readResult.Value != null && readResult.Value.Length > 0)
          {
            // Convert data from IBuffer to byte[]
            byte[] data = new byte[readResult.Value.Length];
            DataReader.FromBuffer(readResult.Value).ReadBytes(data);

            // Create a vlaue converter for luminosity of this sensor
            ValueConverterLuminosityCcSensorBug109D7E valueConverter = new ValueConverterLuminosityCcSensorBug109D7E();
            valueConverter.SetConfigCharacteristic(configCharacteristic);
            luminosity = valueConverter.GetValue(data);
            break;
          }

          // Wait for 100 ms
          await Task.Delay(100);
        }


        byte[] disable = {0};
        await configCharacteristic.WriteValueAsync(disable.AsBuffer(), GattWriteOption.WriteWithoutResponse);

        return luminosity;

      }
      catch (Exception e)
      {
        Debug.WriteLine(e);
        return double.MinValue;
      }
    }

    protected async Task<double> ReadBatteryValue(GattDeviceService deviceService)
    {
      try
      {
        double batteryLevel = double.MinValue;

        // Get characteristic for reading of battery level
        GattCharacteristic dataCharacteristic = (await deviceService.GetCharacteristicsForUuidAsync(
          new Guid(BatteryGattServiceDataCharateristicUuuid))).Characteristics[0];

        // try read in loop
        for (int i = 0; i < 5; i++)
        {
          // Read value from data characteristic
          GattReadResult readResult = await dataCharacteristic.ReadValueAsync(BluetoothCacheMode.Uncached);

          // Valid data ?
          if (readResult.Value != null && readResult.Value.Length > 0)
          {
            // Convert data from IBuffer to byte[]
            byte[] data = new byte[readResult.Value.Length];
            DataReader.FromBuffer(readResult.Value).ReadBytes(data);

            // Create a vlaue converter for luminosity of this sensor
            ValueConverterLuminosityCcSensorBug109D7E valueConverter = new ValueConverterLuminosityCcSensorBug109D7E();
            batteryLevel = valueConverter.GetValue(data);
            break;
          }

          // Wait for 100 ms
          await Task.Delay(100).ConfigureAwait(true);
        }


        return batteryLevel;

      }
      catch (Exception e)
      {
        Debug.WriteLine(e);
        return double.MinValue;
      }
    }

  }

  public class ValueConverterLuminosityCcSensorBug109D7E : ValueConverterBase
  {
    private byte[] ConfigData { get; set; }
    private GattCharacteristic ConfigCharacteristic { get; set; }
    private readonly uint[] _rangeVal = {1000, 4000, 16000, 64000};
    private readonly uint[] _resolutionMaxVal = {65535, 4095, 255, 15};
    int DataBytesCount { get; set; }
    int IndexRange { get; set; }
    int IndexResolution { get; set; }
    Boolean ConfigSet { get; set; }

    public override void SetConfigCharacteristic(GattCharacteristic configCharacteristic)
    {
      ConfigCharacteristic = configCharacteristic;
      if (ConfigCharacteristic != null && ConfigSet == false)
      {
        GattReadResult readResult = null;

        Task.Run(async () => { readResult = await ConfigCharacteristic.ReadValueAsync(BluetoothCacheMode.Uncached); })
          .Wait();

        if (readResult.Value != null && readResult.Value.Length > 0)
        {
          ConfigData = new byte[readResult.Value.Length];
          DataReader.FromBuffer(readResult.Value).ReadBytes(ConfigData);

          ConfigData[14] = 3;
          ConfigData[15] = 0;
          Task.Run(async () => { await configCharacteristic.WriteValueAsync(ConfigData.AsBuffer()); }).Wait();
          ConfigSet = true;

        }

      }

    }

    void DecodeConfig(byte config)
    {
      BitArray bitArray = new BitArray(new[] {config});
      if (bitArray[0])
      {
        DataBytesCount |= 0b0000001;
      }

      if (bitArray[1])
      {
        DataBytesCount |= 0b0000010;
      }

      if (bitArray[2])
      {
        IndexRange |= 0b0000001;
      }

      if (bitArray[3])
      {
        IndexRange |= 0b0000010;
      }

      if (bitArray[4])
      {
        IndexResolution |= 0b0000001;
      }

      if (bitArray[5])
      {
        IndexResolution |= 0b0000010;
      }

    }

    public override double GetValue(byte[] bArray)
    {
      if (CheckBytes(2, bArray) == false)
      {
        return double.MinValue;
      }

      try
      {
        // In the first byte is actual configuration
        DecodeConfig(bArray[0]);
        byte[] dest = new byte[2];
        Array.Copy(bArray, 1, dest, 0, DataBytesCount);

        uint value = BitConverter.ToUInt16(dest, 0);
        return Math.Round(value * (double) _rangeVal[IndexRange] / _resolutionMaxVal[IndexResolution]);
      }
      catch (Exception exception)
      {
        WriteMessage($"{GetType().Name} exception {exception.Message}");
        return double.MinValue;
      }
    }
  }

  public class ValueConverterBase : IBleValueConverter
  {

    public virtual Boolean CheckBytes(int bytesExpected, byte[] bArray)
    {
      if (bArray == null)
      {
        WriteMessage(
          "byte array is null");
        return false;
      }

      if (bArray.Length < bytesExpected)
      {
        WriteMessage(
          $"expected {bytesExpected} bytes received  {bArray.Length} bytes ({Helper.ToHexString(bArray)})");
        return false;
      }

      return true;
    }

    public void WriteMessage(string message)
    {
      Debug.WriteLine(message);
    }


    public virtual void SetConfigCharacteristic(GattCharacteristic configCharacteristic)
    {
    }

    public virtual double GetValue(byte[] bArray)
    {
      return double.MinValue;
    }
  }

  public interface IBleValueConverter
  {
    //void SetConfigCharacteristic(GattCharacteristic configCharacteristic);
    double GetValue(byte[] bArray);
  }
}
